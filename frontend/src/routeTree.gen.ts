/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserImport } from './routes/user'
import { Route as TosImport } from './routes/tos'
import { Route as SettingsImport } from './routes/settings'
import { Route as ContactImport } from './routes/contact'
import { Route as AuthImport } from './routes/auth'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as PasswordResetImport } from './routes/password.reset'
import { Route as PasswordForgotImport } from './routes/password.forgot'
import { Route as EmailVerifyImport } from './routes/email.verify'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'
import { Route as ProtectedBooksBookIdImport } from './routes/_protected/books.$bookId'

// Create/Update Routes

const UserRoute = UserImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const TosRoute = TosImport.update({
  id: '/tos',
  path: '/tos',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PasswordResetRoute = PasswordResetImport.update({
  id: '/password/reset',
  path: '/password/reset',
  getParentRoute: () => rootRoute,
} as any)

const PasswordForgotRoute = PasswordForgotImport.update({
  id: '/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => rootRoute,
} as any)

const EmailVerifyRoute = EmailVerifyImport.update({
  id: '/email/verify',
  path: '/email/verify',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/_protected/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedBooksBookIdRoute = ProtectedBooksBookIdImport.update({
  id: '/_protected/books/$bookId',
  path: '/books/$bookId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/tos': {
      id: '/tos'
      path: '/tos'
      fullPath: '/tos'
      preLoaderRoute: typeof TosImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserImport
      parentRoute: typeof rootRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof rootRoute
    }
    '/email/verify': {
      id: '/email/verify'
      path: '/email/verify'
      fullPath: '/email/verify'
      preLoaderRoute: typeof EmailVerifyImport
      parentRoute: typeof rootRoute
    }
    '/password/forgot': {
      id: '/password/forgot'
      path: '/password/forgot'
      fullPath: '/password/forgot'
      preLoaderRoute: typeof PasswordForgotImport
      parentRoute: typeof rootRoute
    }
    '/password/reset': {
      id: '/password/reset'
      path: '/password/reset'
      fullPath: '/password/reset'
      preLoaderRoute: typeof PasswordResetImport
      parentRoute: typeof rootRoute
    }
    '/_protected/books/$bookId': {
      id: '/_protected/books/$bookId'
      path: '/books/$bookId'
      fullPath: '/books/$bookId'
      preLoaderRoute: typeof ProtectedBooksBookIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/contact': typeof ContactRoute
  '/settings': typeof SettingsRoute
  '/tos': typeof TosRoute
  '/user': typeof UserRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/email/verify': typeof EmailVerifyRoute
  '/password/forgot': typeof PasswordForgotRoute
  '/password/reset': typeof PasswordResetRoute
  '/books/$bookId': typeof ProtectedBooksBookIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/contact': typeof ContactRoute
  '/settings': typeof SettingsRoute
  '/tos': typeof TosRoute
  '/user': typeof UserRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/email/verify': typeof EmailVerifyRoute
  '/password/forgot': typeof PasswordForgotRoute
  '/password/reset': typeof PasswordResetRoute
  '/books/$bookId': typeof ProtectedBooksBookIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/contact': typeof ContactRoute
  '/settings': typeof SettingsRoute
  '/tos': typeof TosRoute
  '/user': typeof UserRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/email/verify': typeof EmailVerifyRoute
  '/password/forgot': typeof PasswordForgotRoute
  '/password/reset': typeof PasswordResetRoute
  '/_protected/books/$bookId': typeof ProtectedBooksBookIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/settings'
    | '/tos'
    | '/user'
    | '/dashboard'
    | '/email/verify'
    | '/password/forgot'
    | '/password/reset'
    | '/books/$bookId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/settings'
    | '/tos'
    | '/user'
    | '/dashboard'
    | '/email/verify'
    | '/password/forgot'
    | '/password/reset'
    | '/books/$bookId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/contact'
    | '/settings'
    | '/tos'
    | '/user'
    | '/_protected/dashboard'
    | '/email/verify'
    | '/password/forgot'
    | '/password/reset'
    | '/_protected/books/$bookId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRoute
  ContactRoute: typeof ContactRoute
  SettingsRoute: typeof SettingsRoute
  TosRoute: typeof TosRoute
  UserRoute: typeof UserRoute
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  EmailVerifyRoute: typeof EmailVerifyRoute
  PasswordForgotRoute: typeof PasswordForgotRoute
  PasswordResetRoute: typeof PasswordResetRoute
  ProtectedBooksBookIdRoute: typeof ProtectedBooksBookIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRoute,
  ContactRoute: ContactRoute,
  SettingsRoute: SettingsRoute,
  TosRoute: TosRoute,
  UserRoute: UserRoute,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  EmailVerifyRoute: EmailVerifyRoute,
  PasswordForgotRoute: PasswordForgotRoute,
  PasswordResetRoute: PasswordResetRoute,
  ProtectedBooksBookIdRoute: ProtectedBooksBookIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/auth",
        "/contact",
        "/settings",
        "/tos",
        "/user",
        "/_protected/dashboard",
        "/email/verify",
        "/password/forgot",
        "/password/reset",
        "/_protected/books/$bookId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/tos": {
      "filePath": "tos.tsx"
    },
    "/user": {
      "filePath": "user.tsx"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx"
    },
    "/email/verify": {
      "filePath": "email.verify.tsx"
    },
    "/password/forgot": {
      "filePath": "password.forgot.tsx"
    },
    "/password/reset": {
      "filePath": "password.reset.tsx"
    },
    "/_protected/books/$bookId": {
      "filePath": "_protected/books.$bookId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
